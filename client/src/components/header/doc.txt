--Header 컴포넌트 역할--

--주요기능--
          날짜선택
          회원가입, 로그인, 로그아웃 링크
          선택한 날짜에 먹은 음식 리스트 구하기(foodList)
          foodList를 참조해 데이터를 가공 -> 용량,용량단위를 확인후 영양성분 계산(calculatedNutrition)
          계산된 calculatedNutrition를 참조하여 -> 해당 날짜의 총 영양성분을 구함(totalNutrition)
          user <- foodList <- calculatedNutrition <- totalNutrition (참조 방향)
          선택한 날짜의 해당 月에 섭취한 칼로리 정보 요청후 redux state에 저장

props: user

states: monthCaloriesIntake, prevUser, date, foodList, currentDateNutrion


--함수--

  로그아웃 함수

  로그인 했을시 오늘 날짜 설정

  user 정보가 변할때마다 foodList 갱신... ( user 참조 )

  currentDateNutrion.calculatedNutrition 구하기 ( foodList 참조 )

  currentDateNutrion.totalNutrition 구하기 ( currentDateNutrion.calculatedNutrition 참조)

  첫 렌더링시 prevUser 설정



선택 날짜의 월간 일일 열량 구하는 함수 동작 방식

  1. dispatch할때 쓰일 객체(form 이라고 부르겠다) 생성 : {
                                선택날짜의 해당 월 일수, //eg) 5월 선택 -> 31
                                선택날짜의 전체 날짜 정보,
                                유저 정보 (user),
                                선택 날짜의 월
                              }

  2. dispatch(fnMonthCalIntake( form ))

      fnMonthCalIntake는 thunk 함수다
        a. 함수가 실행되는 시점의 user정보를 prevuser에 저장한다.
        b. response = getArrayOfMonthCaloriesIntake( form )

            --getArrayOfMonthCaloriesIntake--
                1. 빈배열 선언 (ArrayOfMonthCaloriesIntake)
                2. form.선택날짜의 해당 월 일수 만큼 초기값 1부터 for문 실행
                    a. "2022. 4. 22." 형식의 문자열 생성.
                    b.  a에서 만든 문자열과 form.유저정보 를 담아서 서버에 요청 ()
                    c.  서버는 유저정보와 a의 문자열의 날짜를 참조하여 문서 반환 (해당 날짜에 문서가 있을수도 없을수도 있음)
                    d.  c에서 받은 문서서가 없다면 {
                                                  fullDate: dateString,
                                                  date: i,
                                                  cal: form.user.currentTargetCalories,
                                                }를 배열에 push
                    
                    e.  있다면  {
                                  fullDate: a 의 문자열,
                                  date: i,
                                  cal: 응답 받은 문서의 음식들의 총 열량 합
                                } push
                3. 채워진 ArrayOfMonthCaloriesIntake return
        c. return { response: ArrayOfMonthCaloriesIntake, currentMonth: 선택 날짜의 월}
        d. thunk fulfilled일시 sate.data = response

    즉....
      1. 컴포넌트에서 form객체를 만들고
      2. 해당 fomr으로 thunk를 dispatch하고
      3. thunk안에서 한달일일열량섭취구하는 함수 인자에 form을 넘겨주면서 호출하고
      4. 한달일일열량섭취구하는 함수는 form에 들어있는 정보를 기반으로 for문을 돌아서 객체배열을 반환
      5. 응답받은 데이터를 redux state에 저장.

      ---문제---
        4번 과정에서 선택 월의 일수만큼 서버에 요청을 해서 과부하가 걸림

      --해결방법--
        
        -유저의 정보를 이용해보기-
          전체 기간의 음식 정보는 user.user.foodData에 있다
          eg) 선택한 날짜가 '2022. 5. 9.' 이다
              나는 2022. 5. 1. ~ 2022. 5. 31. 까지의 음식 일일 열량을 얻고싶은거다


              구해야하는 것들: {
                선택날짜의 월:
                일일열량배열
              }
          
          -선택날짜의 월 구하기-
          
            const splited = day.split('.')
            const month = splited[1]
            console.log(month) // ' 5'
            const intMonth = parseInt(month) 
            console.log(intMonth) // 5
            const strMonth = ""+intMonth
            console.log(strMonth)  // '5'

          -선택 날짜의 월의 일일 열량 구하기-

            startData는 날짜를 선택하면 선택 날짜의 Date객체가 초기화된다.
            만들어둔 configDaysinMonth(startData) 하면 선택 날짜의 월의 일수 구해짐

            {
              const yearMonth = '2022. 5.'
            
              for(i=1, i>=daysInMonth, i++) {
                const day = ` ${i}.`
                cont fullDate = yearMonth + day
                const oneDayFoods = user.foodData.find(
                  foods => foods.date === fullDate
                  ? foods
                )

              }
            
            }